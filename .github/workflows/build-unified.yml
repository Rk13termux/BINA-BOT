name: � Multi-Platform Builder (Advanced)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Tipo de build'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - android-only
        - windows-only
        - web-only
      release_version:
        description: 'Versión del release (opcional)'
        required: false
        type: string

env:
  FLUTTER_VERSION: '3.27.1'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Job unificado para todas las plataformas
  build-multiplatform:
    name: 🔨 Build All Platforms
    runs-on: windows-latest
    timeout-minutes: 90
    continue-on-error: false
    
    strategy:
      matrix:
        include:
          - platform: android
            artifact_name: "invictus-trader-android"
            artifact_path: "build/app/outputs/flutter-apk/"
            build_command: "flutter build apk --release --split-per-abi"
            icon: "🤖"
          - platform: windows
            artifact_name: "invictus-trader-windows"
            artifact_path: "build/windows/x64/runner/Release/"
            build_command: "flutter build windows --release"
            icon: "🪟"
          - platform: web
            artifact_name: "invictus-trader-web"
            artifact_path: "build/web/"
            build_command: "flutter build web --release --web-renderer html"
            icon: "🌐"
    
    steps:
    # ========================================
    # 🔧 SETUP ENVIRONMENT
    # ========================================
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ⚡ Setup Flutter Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ${{ runner.tool_cache }}/flutter
        key: flutter-${{ env.FLUTTER_VERSION }}-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
        restore-keys: |
          flutter-${{ env.FLUTTER_VERSION }}-${{ runner.os }}-

    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: 🔧 Pre-build Checks & Cleanup
      run: |
        echo "🔧 Pre-build environment checks..."
        
        # Check available space
        echo "💾 Available disk space:"
        df -h
        echo ""
        
        # Clean any previous builds
        echo "🧹 Cleaning previous builds..."
        flutter clean || echo "No previous builds to clean"
        
        # Verify Flutter installation
        echo "🐦 Flutter verification:"
        flutter --version
        flutter config --list
        echo ""

    - name: ☕ Setup Java (Android)
      if: matrix.platform == 'android' || github.event.inputs.build_type == 'all' || github.event.inputs.build_type == 'android-only'
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: 🟢 Setup Node.js (Web)
      if: matrix.platform == 'web' || github.event.inputs.build_type == 'all' || github.event.inputs.build_type == 'web-only'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'web/package-lock.json'

    # ========================================
    # 🔍 PROJECT ANALYSIS
    # ========================================
    - name: 🔍 Flutter Doctor & Analysis
      run: |
        echo "🔍 Analyzing Flutter environment..."
        flutter doctor -v
        echo ""
        echo "📊 Project Analysis:"
        flutter --version
        flutter config --list
        echo ""
        echo "📦 Dependencies:"
        flutter pub deps

    - name: 📦 Install Dependencies
      run: |
        echo "📦 Installing Flutter dependencies..."
        # Retry logic for network issues
        for i in {1..3}; do
          echo "Attempt $i/3..."
          if flutter pub get; then
            echo "✅ Dependencies installed successfully"
            break
          else
            echo "❌ Attempt $i failed, retrying..."
            sleep 5
          fi
          if [ $i -eq 3 ]; then
            echo "❌ Failed to install dependencies after 3 attempts"
            exit 1
          fi
        done
        echo ""
        echo "🔧 Running build runner (if needed)..."
        flutter packages pub run build_runner build --delete-conflicting-outputs || echo "No build runner configured"

    # ========================================
    # 🧪 QUALITY CHECKS
    # ========================================
    - name: 🧪 Code Quality & Tests
      run: |
        echo "🔍 Running Flutter analyze..."
        flutter analyze --no-fatal-infos
        echo ""
        echo "🧪 Running tests..."
        flutter test --coverage || echo "No tests found"
        echo ""
        echo "📏 Code metrics..."
        find lib -name "*.dart" | wc -l | xargs echo "Dart files:"
        find lib -name "*.dart" -exec wc -l {} + | tail -1 | xargs echo "Total lines:"

    # ========================================
    # 🛠️ PLATFORM-SPECIFIC BUILDS
    # ========================================
    - name: ${{ matrix.icon }} Build ${{ matrix.platform }}
      run: |
        echo "${{ matrix.icon }} Starting ${{ matrix.platform }} build..."
        
        # Platform-specific preparations
        if [ "${{ matrix.platform }}" == "android" ]; then
          echo "🤖 Preparing Android build..."
          flutter config --enable-android
          # Create keystore for release (using debug for demo)
          echo "📱 Android build configuration ready"
        elif [ "${{ matrix.platform }}" == "windows" ]; then
          echo "🪟 Preparing Windows build..."
          flutter config --enable-windows-desktop
          echo "💻 Windows build configuration ready"
        elif [ "${{ matrix.platform }}" == "web" ]; then
          echo "🌐 Preparing Web build..."
          flutter config --enable-web
          echo "🕸️ Web build configuration ready"
        fi
        
        echo ""
        echo "🔨 Executing build command: ${{ matrix.build_command }}"
        
        # Retry logic for builds
        for i in {1..2}; do
          echo "Build attempt $i/2..."
          if ${{ matrix.build_command }}; then
            echo "✅ Build completed successfully!"
            break
          else
            echo "❌ Build attempt $i failed"
            if [ $i -eq 2 ]; then
              echo "❌ Build failed after 2 attempts"
              exit 1
            else
              echo "🔄 Cleaning and retrying..."
              flutter clean
              flutter pub get
              sleep 10
            fi
          fi
        done
        
        # Verify build artifacts
        if [ -d "${{ matrix.artifact_path }}" ]; then
          echo "📁 Build artifacts found:"
          ls -la "${{ matrix.artifact_path }}"
        else
          echo "❌ Build artifacts not found at expected path"
          exit 1
        fi
      shell: bash

    # ========================================
    # 📊 BUILD VERIFICATION
    # ========================================
    - name: 📊 Verify Build Artifacts
      run: |
        echo "📊 Verifying ${{ matrix.platform }} build artifacts..."
        
        if [ "${{ matrix.platform }}" == "android" ]; then
          echo "🤖 Android APK verification:"
          find build/app/outputs -name "*.apk" -exec ls -lh {} \;
          echo ""
          echo "📱 APK details:"
          find build/app/outputs -name "*.apk" -exec file {} \;
        elif [ "${{ matrix.platform }}" == "windows" ]; then
          echo "🪟 Windows EXE verification:"
          find build/windows -name "*.exe" -exec ls -lh {} \;
          echo ""
          echo "💻 EXE details:"
          find build/windows -name "*.exe" -exec file {} \;
        elif [ "${{ matrix.platform }}" == "web" ]; then
          echo "🌐 Web build verification:"
          ls -la build/web/
          echo ""
          echo "🕸️ Web bundle size:"
          du -sh build/web/
        fi
      shell: bash

    # ========================================
    # 📦 ARTIFACT PACKAGING
    # ========================================
    - name: 📦 Package Artifacts
      run: |
        echo "📦 Packaging ${{ matrix.platform }} artifacts..."
        
        # Create release directory
        mkdir -p release/${{ matrix.platform }}
        
        if [ "${{ matrix.platform }}" == "android" ]; then
          echo "📱 Packaging Android APKs..."
          cp -r build/app/outputs/flutter-apk/* release/android/
          # Create a combined release package
          cd release/android
          zip -r ../invictus-trader-android-release.zip .
          cd ../..
        elif [ "${{ matrix.platform }}" == "windows" ]; then
          echo "💻 Packaging Windows executable..."
          cp -r build/windows/x64/runner/Release/* release/windows/
          # Create installer-like structure
          cd release/windows
          zip -r ../invictus-trader-windows-release.zip .
          cd ../..
        elif [ "${{ matrix.platform }}" == "web" ]; then
          echo "🌐 Packaging Web application..."
          cp -r build/web/* release/web/
          cd release/web
          zip -r ../invictus-trader-web-release.zip .
          cd ../..
        fi
        
        echo "✅ Packaging completed!"
        ls -la release/
      shell: bash

    # ========================================
    # ⬆️ UPLOAD ARTIFACTS
    # ========================================
    - name: ⬆️ Upload ${{ matrix.platform }} Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ github.run_number }}
        path: release/${{ matrix.platform }}/
        retention-days: 30
        compression-level: 6

    - name: 📋 Build Summary
      run: |
        echo "## 🎉 ${{ matrix.platform }} Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | ${{ matrix.icon }} ${{ matrix.platform }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Command | \`${{ matrix.build_command }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Artifact Path | \`${{ matrix.artifact_path }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Time | $(date -u) |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ matrix.platform }}" == "android" ]; then
          echo "### 📱 Android Build Details" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find build/app/outputs -name "*.apk" -exec ls -lh {} \; >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ matrix.platform }}" == "windows" ]; then
          echo "### 💻 Windows Build Details" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find build/windows -name "*.exe" -exec ls -lh {} \; >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ matrix.platform }}" == "web" ]; then
          echo "### 🌐 Web Build Details" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh build/web/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

  # ========================================
  # 🚀 UNIFIED RELEASE JOB
  # ========================================
  create-unified-release:
    name: 🚀 Create Unified Release
    needs: build-multiplatform
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ⬇️ Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: 📦 Prepare Unified Release
      run: |
        echo "📦 Preparing unified release package..."
        
        # Create release structure
        mkdir -p unified-release/{android,windows,web}
        
        # Copy artifacts
        if [ -d "artifacts/invictus-trader-android-${{ github.run_number }}" ]; then
          cp -r artifacts/invictus-trader-android-${{ github.run_number }}/* unified-release/android/
        fi
        
        if [ -d "artifacts/invictus-trader-windows-${{ github.run_number }}" ]; then
          cp -r artifacts/invictus-trader-windows-${{ github.run_number }}/* unified-release/windows/
        fi
        
        if [ -d "artifacts/invictus-trader-web-${{ github.run_number }}" ]; then
          cp -r artifacts/invictus-trader-web-${{ github.run_number }}/* unified-release/web/
        fi
        
        # Create README for release
        cat > unified-release/README.md << 'EOF'
        # 🏆 Invictus Trader Pro - Release Package
        
        ## 📱 Android
        - **APK Files**: `/android/` folder
        - **Installation**: Install APK on Android device
        - **Requirements**: Android 8.0+ (API 26+)
        
        ## 💻 Windows
        - **Executable**: `/windows/invictus_trader_pro.exe`
        - **Installation**: Extract and run executable
        - **Requirements**: Windows 10/11 64-bit
        
        ## 🌐 Web
        - **Web App**: `/web/` folder
        - **Deployment**: Upload to web server
        - **Access**: Open `index.html` in browser
        
        ## 🚀 Features
        - ✅ Real-time cryptocurrency data
        - ✅ Premium AI predictions
        - ✅ Advanced technical indicators
        - ✅ News sentiment analysis
        - ✅ Portfolio management
        - ✅ Professional dark theme with gold accents
        
        ## 📞 Support
        Built with ❤️ by Invictus Trading Solutions
        EOF
        
        # Create unified package
        cd unified-release
        zip -r ../invictus-trader-pro-unified-release.zip .
        cd ..
        
        echo "✅ Unified release package created!"
        ls -la *.zip

    - name: 🏷️ Generate Release Tag
      id: tag
      run: |
        if [ "${{ github.event.inputs.release_version }}" != "" ]; then
          echo "tag=v${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
        else
          echo "tag=v$(date +'%Y.%m.%d')-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: "🏆 Invictus Trader Pro ${{ steps.tag.outputs.tag }}"
        body: |
          ## 🎉 New Release: Invictus Trader Pro
          
          ### 📦 What's Included
          - 🤖 **Android APK**: Ready to install on Android devices
          - 🪟 **Windows EXE**: Standalone executable for Windows
          - 🌐 **Web App**: Browser-based application
          
          ### ✨ Features
          - ✅ Real-time cryptocurrency market data
          - ✅ Premium AI-powered predictions
          - ✅ Advanced technical analysis tools
          - ✅ News sentiment analysis
          - ✅ Professional trading interface
          - ✅ Multi-platform support
          
          ### 🚀 Quick Start
          1. **Android**: Download and install the APK
          2. **Windows**: Extract and run the EXE
          3. **Web**: Upload web folder to your server
          
          ### 📊 Build Info
          - **Commit**: `${{ github.sha }}`
          - **Build**: #${{ github.run_number }}
          - **Date**: $(date -u)
          - **Flutter**: ${{ env.FLUTTER_VERSION }}
          
          ---
          Built with ❤️ using Flutter & GitHub Actions
        files: |
          invictus-trader-pro-unified-release.zip
          unified-release/README.md
        draft: false
        prerelease: ${{ github.ref != 'refs/heads/main' }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Release Summary
      run: |
        echo "## 🎉 Unified Release Created!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Release Details" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tag | \`${{ steps.tag.outputs.tag }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Platforms | 🤖 Android • 🪟 Windows • 🌐 Web |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Number | #${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Package Contents" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -la unified-release/ >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # 🧹 CLEANUP JOB
  # ========================================
  cleanup:
    name: 🧹 Cleanup
    needs: [build-multiplatform, create-unified-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🧹 Cleanup Old Artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          console.log(`Found ${artifacts.data.artifacts.length} artifacts`);
          
          // Keep only the most recent 10 artifacts
          const oldArtifacts = artifacts.data.artifacts.slice(10);
          
          for (const artifact of oldArtifacts) {
            try {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            } catch (error) {
              console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
            }
          }

    - name: 📊 Workflow Summary
      run: |
        echo "## 🎯 Workflow Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Achievements" >> $GITHUB_STEP_SUMMARY
        echo "- 🤖 Android APK built and tested" >> $GITHUB_STEP_SUMMARY
        echo "- 🪟 Windows EXE compiled successfully" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 Web application built and optimized" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 Unified release package created" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 GitHub release published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎉 Ready for Production!" >> $GITHUB_STEP_SUMMARY
        echo "Your Invictus Trader Pro app is now ready for deployment across all platforms." >> $GITHUB_STEP_SUMMARY
